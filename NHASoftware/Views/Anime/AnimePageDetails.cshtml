@using Microsoft.AspNetCore.Mvc.TagHelpers
@using NHA.Website.Software.Services.RepositoryPatternFoundationals
@model NHA.Website.Software.Entities.Anime.AnimePage
@inject IUnitOfWork UnitOfWork;

@{
    ViewData["Title"] = @Model.AnimeName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div>
    <h2>@Model.AnimeName</h2>
    <hr />
    
    @{

        <div class="row">
            @if (!string.IsNullOrEmpty(Model.AnimeImageUrl))
            {
                <div class="col-md-4">
                    <img src="@Model.AnimeImageUrl" class="img-fluid"/>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.TrailerUrl))
            {
                <div class="col-md-8">
                    <div class="ratio ratio-4x3">
                        <iframe src="@Model.TrailerUrl" allowfullscreen></iframe>
                    </div>
                </div>
            }
        </div>



        
        if (@Model.AnimeJikanScore != null)
        {
            <div>Jikan Score: <strong>@Model.AnimeJikanScore</strong></div>
        }
        if (@Model.AnimeStatus != null)
        {
            <div>Airing Status: <strong>@Model.AnimeStatus</strong></div>
        }
        if (@Model.AnimeGenres != null)
        {
            var genres = @Model.AnimeGenres.Split(';');

            for (int i = 0; i < genres.Length; i++)
            {
                if (i % 2 == 0)
                {
                    <span class="badge text-bg-dark">@genres[i]</span>
                }
                else
                {
                    <span class="badge text-bg-primary">@genres[i]</span>
                }
            }
        }
    }
    
    <hr/>

    @{

        if (!string.IsNullOrEmpty(Model.AnimeSummary))
        {
            <h4 class="fw-semibold">Synopsis</h4>
            <div class="AnimeSummary">
                @Html.Raw(@Model.AnimeSummary)
            </div>

            <hr/>
        }

        if (!string.IsNullOrEmpty(Model.AnimeBackground))
        {
            <h4 class="fw-semibold">Background</h4>
            <div class="">
                @Html.Raw(@Model.AnimeBackground)
            </div>
        }
    }

</div>

<div class="mt-3 text-muted small" id="hotkeyHelp">
    💡 Tip:  
    <strong>Ctrl + →</strong> = Next anime  
    |  
    <strong>Ctrl + ←</strong> = Back to previous page
</div>

<style>
            #hotkeyHelp {
                font-size: 0.9rem;
                color: #666;
            }
            #hotkeyHelp strong {
                color: #222;
            }
        </style>

<hr/>

@{
    var randomAnime = await UnitOfWork.AnimePageRepository.GetRandomEntityAsync();
}


<div>
    <a asp-action="CreateAnimePage" asp-controller="Anime">Edit</a> |
    <a asp-action="Index">Back to List</a> |
    <a id="nextLink" asp-action="AnimePageDetails" asp-route-id="@randomAnime!.Id" asp-controller="Anime">Next &#x2794;</a>
</div>

<script>
    (function () {
      const link = document.getElementById('nextLink');

      // Ignore hotkeys while typing in inputs/textareas/contenteditable
      function isTypingTarget(el) {
        return el && (
          el.tagName === 'INPUT' ||
          el.tagName === 'TEXTAREA' ||
          el.isContentEditable ||
          el.tagName === 'SELECT'
        );
      }

      document.addEventListener('keydown', function (e) {
        if (!link) return;
        if (isTypingTarget(document.activeElement)) return;

        // Hotkey: Ctrl + ArrowRight (change this to what you prefer)
        if (e.ctrlKey && e.key === 'ArrowRight') {
          e.preventDefault();

          // Prefer location change for SPA-like snappiness; click works too.
          const href = link.getAttribute('href');
          if (href) {
            window.location.href = href;
          } else {
            link.click();
          }
        }

        if (e.ctrlKey && e.key === 'ArrowLeft') {
          e.preventDefault();
          window.history.back();
        }
      }, { passive: false });
    })();

</script>
