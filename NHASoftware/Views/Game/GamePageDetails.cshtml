@using NHA.Website.Software.Services.RepositoryPatternFoundationals
@using NHA.Website.Software.Views.Shared.Sponsers.ViewModel
@model NHA.Website.Software.Entities.Game.GamePage
@inject IUnitOfWork UnitOfWork;

@{
    ViewData["Title"] = @Model.Name;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    string ConvertPlatformToIcon(string platform)
    {
        if (platform.Equals("PC", StringComparison.OrdinalIgnoreCase))
        {
            return "/Images/pc-computer-with-monitor_icon-icons.com_56249.png";
        }

        var lowerPlatform = platform.ToLower();
        if (lowerPlatform.Contains("playstation"))
        {
            return "/Images/Playstation_icon-icons.com_67099.png";
        }

        if (lowerPlatform.Contains("xbox"))
        {
            return "/Images/microsoft_xbox_icon_136396.png";
        }

        if (lowerPlatform.Equals("ios") || lowerPlatform.Equals("macos"))
        {
            return "/Images/social_apple_mac_65.png";
        }

        if (lowerPlatform.Equals("wii"))
        {
            return "/Images/wii_3515.png";
        }

        if (lowerPlatform.Contains("nintendo"))
        {
            return "/Images/nintendo_icon_146136.png";
        }

        if (lowerPlatform.Equals("android"))
        {
            return "/Images/2333410-android-os-smartphone_85588.png";
        }

        if (lowerPlatform.Equals("linux"))
        {
            return "/Images/linux_penguin_animal_9362.png";
        }

        return "";
    }
}
@{
    var randomGame = await UnitOfWork.GamePageRepository.GetRandomEntityAsync();
}
<div>
    <div class="row my-auto">
        <h2 class="col-auto my-auto">@Model.Name</h2>
        <a id="nextLink" asp-action="GamePage" class="col-auto my-auto" asp-route-id="@randomGame!.Id" asp-controller="Game">Next &#x2794;</a>
    </div>
    <hr/>

    @{
        int runningCount = Model.UpVotes - Model.DownVotes;
        if (@Model.ImageUrl != null)
        {
            <div class="row mb-4">
                <!-- Vote sidebar -->
                <div class="col-auto d-flex flex-column align-items-center me-2">
                    <div class="vote-container d-flex flex-column align-items-center">
                        <button class="vote-btn upvote interactable" data-post-id="@Model.Id">
                            <i class="bi bi-caret-up-fill fs-4"></i>
                        </button>
                        <div class="vote-count fw-bold my-1" id="vote-count-@Model.Id">@runningCount</div>
                        <button class="vote-btn downvote interactable" data-post-id="@Model.Id">
                            <i class="bi bi-caret-down-fill fs-4"></i>
                        </button>
                    </div>
                </div>
                <div class="col-6 rounded-2">

                    <img src="@Model.ImageUrl" alt="@Model.Name's Box Art" class="img-fluid rounded-2"/>
                </div>
            </div>
        }

        <hr/>
        <h4 class="fw-semibold">Metadata</h4>
        if (@Model.GameScore != null)
        {
            <div>RawgScore: <strong>@Model.GameScore</strong></div>
        }

        if (@Model.Released != null)
        {
            <div>Released on: <strong>@Model.Released</strong></div>
        }

        <hr/>

        <div class="row">
            @if (@Model.Genres != null)
            {
                <div class="col">
                    <div class="h5 text-primary">Genres:</div>
                    @{ await Html.RenderPartialAsync("Sponsers/_GenreListPartial", new GenreListVm(@Model.Genres ?? string.Empty, GenreListType.Game)); }
                </div>

                <div class="col">
                    @if (@Model.Platforms != null)
                    {
                        var platforms = @Model.Platforms.Split(';');
                        var colorIndex = 0;

                        <div class="h5 text-primary">Platforms:</div>

                        for (int i = 0; i < platforms.Length; i++)
                        {
                            switch (i)
                            {
                                case 0:
                                    <a asp-controller="Home" asp-action="Index" class="text-decoration-none">
                                        <span class="badge text-bg-primary col-auto p-2 interactable"><img src="@ConvertPlatformToIcon(platforms[i])" alt="@Model.Name's Platform Icon" class="me-1"/>@platforms[i]</span>
                                    </a>
                                    break;
                                case 1:
                                    <a asp-controller="Home" asp-action="Index" class="text-decoration-none">
                                        <span class="badge text-bg-light border col-auto p-2 interactable"><img src="@ConvertPlatformToIcon(platforms[i])" alt="@Model.Name's Platform Icon" class="me-1"/>@platforms[i]</span>
                                    </a>
                                    break;
                                case 2:
                                    <a asp-controller="Home" asp-action="Index" class="text-decoration-none">
                                        <span class="badge text-bg-success col-auto p-2 interactable"><img src="@ConvertPlatformToIcon(platforms[i])" alt="@Model.Name's Platform Icon" class="me-1"/>@platforms[i]</span>
                                    </a>
                                    colorIndex = 0;
                                    break;
                            }

                            colorIndex++;
                        }
                    }
                </div>

            }
        </div>}

    <hr/>
    <div class="AnimeSummary">
        @Html.Raw(@Model.Summary)
    </div>
</div>



<hr />

<div class="mt-3 text-muted small" id="hotkeyHelp">
    💡 Tip:
    <strong class="text-primary">Ctrl + →</strong> = Next Game
    |
    <strong class="text-primary">Ctrl + ←</strong> = Back to previous page
</div>

<style>
    #hotkeyHelp {
        font-size: 0.9rem;
        color: #666;
    }

        #hotkeyHelp strong {
            color: #222;
        }
</style>

<hr />

<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a> | 
    <a id="nextLink" asp-action="GamePage" asp-route-id="@randomGame!.Id" asp-controller="Game">Next &#x2794;</a>
</div>

<script>
    (function () {
      const link = document.getElementById('nextLink');

      // Ignore hotkeys while typing in inputs/textareas/contenteditable
      function isTypingTarget(el) {
        return el && (
          el.tagName === 'INPUT' ||
          el.tagName === 'TEXTAREA' ||
          el.isContentEditable ||
          el.tagName === 'SELECT'
        );
      }

      document.addEventListener('keydown', function (e) {
        if (!link) return;
        if (isTypingTarget(document.activeElement)) return;

        // Hotkey: Ctrl + ArrowRight (change this to what you prefer)
        if (e.ctrlKey && e.key === 'ArrowRight') {
          e.preventDefault();

          // Prefer location change for SPA-like snappiness; click works too.
          const href = link.getAttribute('href');
          if (href) {
            window.location.href = href;
          } else {
            link.click();
          }
        }

        if (e.ctrlKey && e.key === 'ArrowLeft') {
          e.preventDefault();
          window.history.back();
        }
      }, { passive: false });
    })();

            document.addEventListener("DOMContentLoaded", () => {
        // Attach click listeners to all vote buttons
        document.querySelectorAll(".vote-btn").forEach(button => {
            button.addEventListener("click", async (e) => {
                const postId = button.getAttribute("data-post-id");
                const isUpvote = button.classList.contains("upvote");

                try {
                    const response = await fetch(`/api/Like/Game/${postId}?upvote=${isUpvote}`, {
                        method: "PUT",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Find the vote count element
                        const voteCountElem = document.getElementById(`vote-count-${postId}`);
                        let currentCount = parseInt(voteCountElem.textContent) || 0;

                        // Update locally
                        currentCount += isUpvote ? 1 : -1;
                        voteCountElem.textContent = currentCount;
                    } else {
                        console.log("Vote failed or already applied");
                    }
                } catch (err) {
                    console.error("Error voting:", err);
                }
            });
        });
    });

</script>
