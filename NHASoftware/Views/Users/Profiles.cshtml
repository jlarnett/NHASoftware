@using Microsoft.AspNetCore.Identity
@using NHA.Website.Software.Entities.Identity
@using NHA.Website.Software.Services.FriendSystem
@model NHASoftware.Views.ViewModels.SocialVMs.ProfileVM
@inject UserManager<ApplicationUser> userManager
@inject IFriendSystem friendSystem

@{
    ViewData["Title"] = @Model.User!.DisplayName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<head>
    <link rel="stylesheet" href="~/css/Profile.css">
</head>

@{
    var friendCount = await friendSystem.GetFriendCountAsync(Model.User!.Id);
    var mutualFriends = await friendSystem.GetMutualFriendsAsync(Model.User.Id, userManager.GetUserId(User)!);
    var mutualFriendCount = mutualFriends.Count();

    string activeUserId = String.Empty;
    var activeUser = await userManager.GetUserAsync(User);

    if (activeUser != null)
    {
        activeUserId = await userManager.GetUserIdAsync(activeUser);
    }
}

<div class="container-fluid">
    <div class="row border-primary border rounded-2">
        <div class="border-end border-primary col-4 p-2">
            <img class="img-fluid rounded-2" src="~/ProfilePictures/@Model.User.ProfilePicturePath" alt="@Model.User.DisplayName's Profile Picture'"/>
        </div>
        <div class="col border-end border-primary text-center">

            <a class="link-primary h5" role="button" href="/Users/FriendsView?userId=@Model.User.Id">@friendCount Friends</a>
            
            @if (User.Identity!.IsAuthenticated && !userManager.GetUserId(User)!.Equals(Model.User.Id))
            {

                <div class="border-top border-dark mb-2">
                    <a class="link-dark h5" role="button" href="/Users/MutualFriendsView?userIdOne=@Model.User.Id&userIdTwo=@activeUserId">@mutualFriendCount Mutual Friends</a>
                    <div class="flex-wrap">
                        @{
                            var mutualFriendCounter = 0;
                            const int mutualFriendMax = 3;

                            foreach (var user in mutualFriends)
                            {
                                if (mutualFriendCounter < mutualFriendMax)
                                {
                                    <div class="d-flex border-bottom border-dark p-2">
                                        <div class="text-center">
                                           <div class="col-2 m-auto">
                                                <img class="img-fluid" src="~/ProfilePictures/@user.ProfilePicturePath" href="" alt="@user.DisplayName's Profile Picture'"/>
                                            </div>
                                            <a class="link-primary h3" href="/Users/GetProfiles?userId=@user.Id" role="button">@user.DisplayName</a>
                                        </div>
                                    </div>
                                    mutualFriendCounter++;
                                }
                                else
                                {
                                    //We hit the max amount of mutual friends within Profile Friend Container
                                }
                            }
                        }
                    </div>
                </div>
            }

        </div>
        <div class="col">
            <h1 clas s="text-center h1">User Biography</h1>
            <div>This is a test biography that needs to be modified.This is a test biography that needs to be modified.
                This is a test biography that needs to be modified.This is a test biography that needs to be modified.</div>
            <div class="container-fluid">
                <div class="row">
                    <div class="col"></div>
                    <button class="btn-outline-dark rounded-2 m-md-auto col-2">
                        edit
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="row border-start border-end border-bottom border-primary">
        <div class="p-2 col-4 align-self-center ">
            <h2 class="text-center display-6 text-break m-auto">@Model.User.DisplayName</h2>
        </div>
        
        @{
            string isFriends = (await friendSystem.IsFriendsAsync(@Model.User.Id, @userManager.GetUserId(User)!)).ToString();
            string friendRequestSent = (await friendSystem.IsFriendRequestSentAsync(@userManager.GetUserId(User)!, @Model.User.Id)).ToString();
        }

        <div class="dropdown col-md-4 p-1 align-self-center" id="FriendRequestButton" recipientId="@Model.User.Id" senderId="@userManager.GetUserId(User)" isFriends="@isFriends" friendRequestSent="@friendRequestSent">
            @Html.AntiForgeryToken()

            <a class="btn btn-outline-primary dropdown-toggle col-6 my-auto" href="#" role="button" id="FriendDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                <img id="FriendRequestIcon" src="~/Images/CheckMarkIcon.png" alt="FriendCheckMarkIcon" class=" col img-fluid"/>
                <div id="FriendDropdownText" class="d-inline-block">TEST VALUE</div>
            </a>
            <ul id="FriendRequestDropdownLinkContainer" class="dropdown-menu" aria-labelledby="FriendDropdown">
            </ul>
        </div>
    </div>
</div>

<div id="SocialWall" class="container-fluid">
    <div class="row">
        <p class="text-center h1 mt-3">User's Wall</p>
    </div>
    
    <div id="ContentFeed" class="row" profile-user-id="@Model.User.Id">
    </div>
</div>

@section Scripts {
    <script src="~/Scripts/Social_Feed/Gratitude.js"></script>
    <script src="~/Scripts/Social_Feed/ContentFeedAjaxCalls.js"></script>
    <script src="~/Scripts/Social_Feed/ContentFeedUtility.js"></script>
    <script src="~/Scripts/Social_Feed/ContentFeed.js"></script>
    <script src="~/Scripts/Social_Feed/ContentFeedImageLoader.js"></script>
    <script src="~/Scripts/Social_Feed/ContentFeedLoader.js"></script>
    <script src="~/Scripts/FriendSystem/FriendRequestButton.js"></script>

}
